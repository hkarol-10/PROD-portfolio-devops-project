input {
  beats {
    port => 5044
  }
}

filter {
  if [log][file][path] =~ "nginx" {
    grok {
      match => { "message" => '%{IPORHOST:client_ip} - %{USER:remote_user} \[%{HTTPDATE:timestamp}\] "%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:status} %{NUMBER:bytes} "(?:%{URI:referrer}|-)" "(?:%{DATA:user_agent}|-)" "(?:%{IPORHOST:forwarded_for}|-)"' }
    }

    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
      target => "@timestamp"
    }

    # GeoIP dla forwarded_for
    if [forwarded_for] and [forwarded_for] != "-" {
      geoip {
        source => "forwarded_for"
        target => "geoip"
        fields => ["city_name","country_name","country_code2","continent_code","region_name","location"]
      }

      # MAP coordinates (lat, lon) for the field `map_tracker_tag`. The order of steps is crucial:
      # 1. First, create `map_tracker_tag` on the current Elasticsearch index with type `geo_point` (using Dev Tools PUT).
      # 2. Create a mapping template for `map_tracker_tag` so that new indexes use the correct mapping (via Kibana UI).
      # 3. Create the field in Kibana under /app/management/kibana/dataViews/dataView/ as a geopoint (it should indicate if the field already exists).
      # 4. Apply the changes in Logstash.
      # 5. Refresh fields / data views in Kibana.
      # Note: If you change the order or skip any step, the field may be treated as TEXT, or the map may not work due to the missing `geohospitality` field.


      if [geoip][geo][location] {
        mutate {
          add_field => {
            "[map_tracker_tag]" => "%{[geoip][geo][location][lat]},%{[geoip][geo][location][lon]}"
          }
        }
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "logs-%{+YYYY.MM.dd}"
  }
}